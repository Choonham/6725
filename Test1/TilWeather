from PyQt5 import QtCore, QtGui, QtWidgets 

import datetime 

from time import sleep

import threading

import tkinter as tk

import requests

from PyQt5.QtGui import QPixmap, QImage   

import sys

import feedparser
import forecastio

 

class Ui_MainWindow(object):

    hello_world = 0

    root = tk.Tk()

    width = root.winfo_screenwidth()

    height = root.winfo_screenheight()

    News_url = "http://fs.jtbc.joins.com//RSS/newsflash.xml"

    start_or_stop=False

    start=True

 

 

    def setupUi(self, MainWindow):

        MainWindow.setObjectName("MainWindow")

 

        palette = QtGui.QPalette()

 

        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))

        brush.setStyle(QtCore.Qt.SolidPattern)

        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)

 

        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))

        brush.setStyle(QtCore.Qt.SolidPattern)

        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)

 

        MainWindow.setPalette(palette)

        #MainWindow.resize(800, 600)

        MainWindow.showFullScreen()

 

        self.centralwidget = QtWidgets.QWidget(MainWindow)

        self.centralwidget.setObjectName("centralwidget")
        #날씨 이모티콘 ====================================================================
        self.weather = QtWidgets.QLabel(self.centralwidget)
        self.weather.setGeometry(QtCore.QRect(20, 15, 150,130))
        self.weather.setObjectName("weather")

        #온도 label [온도 출력]
        self.temperature = QtWidgets.QLabel(self.centralwidget)
        self.temperature.setGeometry(QtCore.QRect(25, 120, 150,130))
        self.temperature.setObjectName("temperature")
        self.temperature.setFont(QtGui.QFont("Sanserif",20))
 

        #================================================================================

        #clock 이라는 이름으로 label 생성 [hello world]===================================

        self.clock = QtWidgets.QLabel(self.centralwidget)

        self.clock.setGeometry(QtCore.QRect(200,300,100,50))

        self.clock.setObjectName("clock")

 

        #time 이라는 이름으로 label 생성 [(오전/오후)시/분]

        self.time = QtWidgets.QLabel(self.centralwidget)

        self.time.setGeometry(QtCore.QRect(170,80,800,60))

        self.time.setObjectName("time")

        #setFont(QtGui.QFont("Font_name",Font_size))

        self.time.setFont(QtGui.QFont("Sanserif",40)) 

 

        #date 이라는 이름으로 label 생성 [년/월/일]

        self.date = QtWidgets.QLabel(self.centralwidget)

        self.date.setGeometry(QtCore.QRect(180, 15, 300, 50))

        self.date.setObjectName("date")

        self.date.setFont(QtGui.QFont("맑은 고딕",20))

 

        self.news1 = QtWidgets.QLabel(self.centralwidget)

        self.news1.setGeometry(QtCore.QRect(self.width-470,self.height-350,800,50))

        self.news1.setObjectName("news1")

        self.news1.setFont(QtGui.QFont("맑은 고딕",11))

 

        self.news2 = QtWidgets.QLabel(self.centralwidget)

        self.news2.setGeometry(QtCore.QRect(self.width-470,self.height-320,800,50))

        self.news2.setObjectName("news2")

        self.news2.setFont(QtGui.QFont("맑은 고딕",11))

 

        self.news3 = QtWidgets.QLabel(self.centralwidget)

        self.news3.setGeometry(QtCore.QRect(self.width-470,self.height-290,800,50))

        self.news3.setObjectName("news3")

        self.news3.setFont(QtGui.QFont("맑은 고딕",11))

 

        self.news4 = QtWidgets.QLabel(self.centralwidget)

        self.news4.setGeometry(QtCore.QRect(self.width-470,self.height-260,800,50))

        self.news4.setObjectName("news4")

        self.news4.setFont(QtGui.QFont("맑은 고딕",11))

 

        self.news5 = QtWidgets.QLabel(self.centralwidget)

        self.news5.setGeometry(QtCore.QRect(self.width-470,self.height-230,800,50))

        self.news5.setObjectName("news5")

        self.news5.setFont(QtGui.QFont("맑은 고딕",11))

 

        self.news6 = QtWidgets.QLabel(self.centralwidget)

        self.news6.setGeometry(QtCore.QRect(self.width-470,self.height-200,800,50))

        self.news6.setObjectName("news6")

        self.news6.setFont(QtGui.QFont("맑은 고딕",11))

 

        self.news7 = QtWidgets.QLabel(self.centralwidget)

        self.news7.setGeometry(QtCore.QRect(self.width-470,self.height-170,800,50))

        self.news7.setObjectName("news7")

        self.news7.setFont(QtGui.QFont("맑은 고딕",11))

 

        self.news8 = QtWidgets.QLabel(self.centralwidget)

        self.news8.setGeometry(QtCore.QRect(self.width-470,self.height-140,800,50))

        self.news8.setObjectName("news8")

        self.news8.setFont(QtGui.QFont("맑은 고딕",11))

 

        self.news9 = QtWidgets.QLabel(self.centralwidget)

        self.news9.setGeometry(QtCore.QRect(self.width-470,self.height-110,800,50))

        self.news9.setObjectName("news9")

        self.news9.setFont(QtGui.QFont("맑은 고딕",11))

 

        self.news10 = QtWidgets.QLabel(self.centralwidget)

        self.news10.setGeometry(QtCore.QRect(self.width-470,self.height-80,800,50))

        self.news10.setObjectName("news10")

        self.news10.setFont(QtGui.QFont("맑은 고딕",11))

 

 

 

        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(MainWindow)

        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))

        self.menubar.setObjectName("menubar")

        MainWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)

        self.statusbar.setObjectName("statusbar")

        MainWindow.setStatusBar(self.statusbar)

 

        self.retranslateUi(MainWindow)

        QtCore.QMetaObject.connectSlotsByName(MainWindow)

 

 

    def retranslateUi(self, MainWindow):

        _translate = QtCore.QCoreApplication.translate

        MainWindow.setWindowTitle(_translate("MainWindow", "SmartMirror"))

 

    def hello(self,MainWindow):

        self.hello_world = self.hello_world + 1

        self.clock.setText("%d %s" %(self.hello_world, "hello world"))

 

    def set_time(self,MainWindow):

        EvenOrAfter = "오전"

        while True:

            now=datetime.datetime.now() #현재 시각을 시스템에서 가져옴

            hour=now.hour

 

            if(now.hour>=12):

                EvenOrAfter="오후"

                hour=now.hour%12

 

                if(now.hour==12):

                    hour=12

 

            else:

                EvenOrAfter="오전"

 

            self.date.setText("%s년 %s월 %s일"%(now.year,now.month,now.day))

            self.time.setText(EvenOrAfter+" %s시 %s분" %(hour,now.minute))

            sleep(1)

    def weather_icon(self,MainWindow):
        while True:
            api_key = "1ee6cc64e424252d9358781608102c26"

            
            lat = 37.544577
            lng = 126.761627

            #서버 접속후 데이터를 받아옴
            forecast = forecastio.load_forecast(api_key, lat, lng)
            weather=forecast.currently()


            weather_cashe=weather.icon

            self.temperature.setText("[ %.1f ℃ ]" %(weather.temperature))
           
            if "day" in weather_cashe:
                if "partly-cloudy" in weather_cashe:
                    self.weather.setPixmap(QtGui.QPixmap("cloudy_day.png"))
                elif "cloudy" in weather_cashe:
                    self.weather.setPixmap(QtGui.QPixmap("clouds.png"))
                elif "clear" in weather_cashe:
                    self.weather.setPixmap(QtGui.QPixmap("sun.png"))

            elif "night" in weather_cashe:
                if "partly-cloudy" in weather_cashe:
                    self.weather.setPixmap(QtGui.QPixmap("cloudy_night.png"))
                elif "cloudy" in weather_cashe:
                    self.weather.setPixmap(QtGui.QPixmap("clouds.png"))
                elif "clear" in weather_cashe:
                    self.weather.setPixmap(QtGui.QPixmap("moon.png"))
           
            elif "cloudy" in weather_cashe:
                self.weather.setPixmap(QtGui.QPixmap("clouds.png"))

            elif "rain" in weather_cashe:
                self.weather.setPixmap(QtGui.QPixmap("drop.png"))

            elif "snow" in weather_cashe:
                self.weather.setPixmap(QtGui.QPixmap("snowflake.png"))

            sleep(300)

    def News(self,MainWindow) :

        d = feedparser.parse(self.News_url)

        while True :

            num = 1

            for e in d.entries :

                if num%10==1:

                    self.news1.setText("[%d] %s"%(num,e.title))

                elif num%10==2:

                    self.news2.setText("[%d] %s"%(num,e.title))

                elif num%10==3:

                    self.news3.setText("[%d] %s"%(num,e.title))

                elif num%10==4:

                    self.news4.setText("[%d] %s"%(num,e.title))

                elif num%10==5:

                    self.news5.setText("[%d] %s"%(num,e.title))

                elif num%10==6:

                    self.news6.setText("[%d] %s"%(num,e.title))

                elif num%10==7:

                    self.news7.setText("[%d] %s"%(num,e.title))

                elif num%10==8:

                    self.news8.setText("[%d] %s"%(num,e.title))

                elif num%10==9:

                    self.news9.setText("[%d] %s"%(num,e.title))

                elif num%10==0:

                    self.news10.setText("[%d] %s"%(num,e.title))

                num=num+1

                sleep(1)

    def weather_start(self,MainWindow):
        thread=threading.Thread(target=self.weather_icon,args=(self,))
        thread.daemon=True #프로그램 종료시 프로세스도 함께 종료 (백그라운드 재생 X)
        thread.start()

    def time_start(self,MainWindow):

        thread=threading.Thread(target=self.set_time,args=(self,))

        thread.daemon=True #프로그램 종료시 프로세스도 함께 종료 (백그라운드 재생 X)

        thread.start()

    def News_start(self,MainWindow):

        thread=threading.Thread(target=self.News,args=(self,))

        thread.daemon=True #프로그램 종료시 프로세스도 함께 종료 (백그라운드 재생 X)

        thread.start()

   

  

 

if __name__=="__main__":

    app = QtWidgets.QApplication(sys.argv)

    MainWindow = QtWidgets.QMainWindow()

 

    ui = Ui_MainWindow()

 

    ui.setupUi(MainWindow)

 

    ui.time_start(MainWindow) #time thread
    ui.weather_start(MainWindow) #weather thread
    ui.News_start(MainWindow) #news thread

    MainWindow.show()

 

    sys.exit(app.exec_())
